name: Continuous integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

  # Specify VTK version
  VTK_HASH: 6b6b89ee577e6c6a5ee6f5220b9c6a12513c30b4 # v9.4.1

  # Specify ITK version
  ITK_HASH: 898def645183e6a2d3293058ade451ec416c4514 # v5.4.2

jobs:
  ########
  # BUILD AND CACHE VTK
  update_vtk:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
    outputs:
      cache_key: ${{steps.vtk_hash.outputs.cache_key}}
      git_hash: ${{steps.vtk_hash.outputs.git_hash}}

    steps:
    - name: Set VTK Cache Key
      id: vtk_hash
      shell: bash
      run: |
        echo "cache_key=vtk-${{ runner.os }}-${{ env.BUILD_TYPE }}-$VTK_HASH" >> "$GITHUB_OUTPUT"

    - name: Cache VTK Build
      id: cache-vtk
      uses: actions/cache@v4
      with:
        path: |
          vtk-install
        key: ${{steps.vtk_hash.outputs.cache_key}}

    - name: Check VTK Cache
      shell: bash
      run: |
        if [ -d "vtk-install" ]; then
          echo "VTK build found in cache. Skipping clone, configure, and build."
          echo "CACHE_HIT=true" >> $GITHUB_ENV
        else
          echo "VTK not found in cache. Proceeding with clone, configure, and build."
          echo "CACHE_HIT=false" >> $GITHUB_ENV
        fi

    - name: Install Dependencies
      shell: bash
      if: contains(matrix.os, 'ubuntu')
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping install dependencies (cache hit)."
        else
          echo "Installing system dependencies..."
          sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make
        fi

    - name: Clone VTK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK clone (cache hit)."
        else
          echo "Cloning VTK..."
          mkdir vtk
          cd vtk
          git init
          git remote add origin https://gitlab.kitware.com/vtk/vtk.git
          git fetch --depth 1 origin $VTK_HASH
          git checkout FETCH_HEAD
        fi

    - name: Configure VTK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK configuration (cache hit)."
        else
          echo "Configuring VTK..."
          cmake -S vtk -B vtk-build -DCMAKE_INSTALL_PREFIX=vtk-install -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=ON -DVTK_BUILD_TESTING=OFF -DVTK_VERSIONED_INSTALL=OFF
        fi

    - name: Build VTK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK build (cache hit)."
        else
          echo "Building VTK..."
          cmake --build vtk-build --parallel 4 --config ${{ env.BUILD_TYPE }}
        fi

    - name: Install VTK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK install (cache hit)."
        else
          echo "Installing VTK..."
          cmake --install vtk-build
        fi

  update_itk:
    ########
    # BUILD AND CACHE ITK
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
    outputs:
      cache_key: ${{steps.itk_hash.outputs.cache_key}}

    steps:
    - name: Get ITK Git Hash
      id: itk_hash
      shell: bash
      run: |
        echo "cache_key=itk-${{ runner.os }}-${{ env.BUILD_TYPE }}-$ITK_HASH" >> "$GITHUB_OUTPUT"

    - name: Cache ITK Build
      id: cache-itk
      uses: actions/cache@v4
      with:
        path: |
          itk-install
        key: ${{steps.itk_hash.outputs.cache_key}}

    - name: Check ITK Cache
      shell: bash
      run: |
        if [ -d "itk-install" ]; then
          echo "ITK build found in cache. Skipping clone, configure, and build."
          echo "CACHE_HIT=true" >> $GITHUB_ENV
        else
          echo "ITK not found in cache. Proceeding with clone, configure, and build."
          echo "CACHE_HIT=false" >> $GITHUB_ENV
        fi

    - name: Install Dependencies
      shell: bash
      if: contains(matrix.os, 'ubuntu')
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping install dependencies (cache hit)."
        else
          echo "Installing system dependencies..."
          sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make
        fi

    - name: Clone ITK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK clone (cache hit)."
        else
          echo "Cloning ITK..."
          mkdir itk
          cd itk
          git init
          git remote add origin https://github.com/InsightSoftwareConsortium/ITK.git
          git fetch --depth 1 origin $ITK_HASH
          git checkout FETCH_HEAD
        fi

    - name: Configure ITK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK configuration (cache hit)."
        else
          echo "Configuring ITK..."
          cmake -S itk -B itk-build -DCMAKE_INSTALL_PREFIX=itk-install -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF
        fi

    - name: Build ITK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK build (cache hit)."
        else
          echo "Building ITK..."
          cmake --build itk-build --parallel 4 --config ${{ env.BUILD_TYPE }}
        fi

    - name: Install ITK
      shell: bash
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK install (cache hit)."
        else
          echo "Installing ITK..."
          cmake --install itk-build
        fi

  build:
    needs: [update_vtk, update_itk]
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      if: contains(matrix.os, 'ubuntu')
      shell: bash
      run: |
        echo "Installing system dependencies..."
        sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Restore VTK Cache
      id: cache-vtk
      uses: actions/cache/restore@v4
      with:
        path: |
          vtk-install
        key: vtk-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{needs.update_vtk.outputs.git_hash}}

    - name: Restore ITK Cache
      id: cache-itk
      uses: actions/cache/restore@v4
      with:
        path: |
          itk-install
        key: itk-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{needs.update_itk.outputs.git_hash}}

    - name: Configure CMake
      shell: bash
      run: |
        ls itk-install/lib/cmake
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVTK_DIR=${{github.workspace}}/vtk-install/lib/cmake/vtk -DITK_DIR=itk-install/lib/cmake/ITK-5.4 -DIGSIO_SUPERBUILD=ON -DBUILDNAME="GH Action ${{ runner.os }} ${{ env.BUILD_TYPE }}"

    - name: Build and Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      shell: bash
      run: ctest -C ${{env.BUILD_TYPE}} -D Experimental -DCTEST_SITE="GH Action ${{ runner.os }}"
