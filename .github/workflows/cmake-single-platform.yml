name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

  # Specify VTK version
  VTK_MAJOR: 9
  VTK_MINOR: 3
  VTK_PATCH: 0

  # Specify ITK version
  ITK_MAJOR: 5
  ITK_MINOR: 3
  ITK_PATCH: 0

  # Set installation directory
  INSTALL_DIR: ${{ github.workspace }}/install

jobs:
  ########
  # BUILD AND CACHE VTK
  update_vtk:
    runs-on: ubuntu-22.04
    outputs:
      cache_key: ${{steps.vtk_hash.outputs.cache_key}}
      git_hash: ${{steps.vtk_hash.outputs.git_hash}}

    steps:
    - name: Get VTK Git Hash
      id: vtk_hash
      run: |
        HASH=$(git ls-remote --tags https://gitlab.kitware.com/vtk/vtk.git v${{ env.VTK_MAJOR }}.${{ env.VTK_MINOR }}.${{ env.VTK_PATCH }} | awk '{print $1}')
        if [ -z "$HASH" ]; then
          echo "Failed to retrieve VTK commit hash. Exiting."
          exit 1
        fi
        echo "VTK commit hash retrieved: $HASH"
        echo "cache_key=vtk-${{ runner.os }}-${{ env.BUILD_TYPE }}-$HASH" >> "$GITHUB_OUTPUT"
        echo "git_hash=$HASH" >> "$GITHUB_OUTPUT"

    - name: Cache VTK Build
      id: cache-vtk
      uses: actions/cache@v4
      with:
        path: |
          vtk
          vtk-build
        key: ${{steps.vtk_hash.outputs.cache_key}}

    - name: Check VTK Cache
      run: |
        if [ -d "vtk-build" ]; then
          echo "VTK build found in cache. Skipping clone, configure, and build."
          echo "CACHE_HIT=true" >> $GITHUB_ENV
        else
          echo "VTK not found in cache. Proceeding with clone, configure, and build."
          echo "CACHE_HIT=false" >> $GITHUB_ENV
        fi

    - name: Install Dependencies
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping install dependencies (cache hit)."
        else
          echo "Installing system dependencies..."
          sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make
        fi

    - name: Clone VTK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK clone (cache hit)."
        else
          echo "Cloning VTK..."
          git clone https://gitlab.kitware.com/vtk/vtk.git --branch v${{ env.VTK_MAJOR }}.${{ env.VTK_MINOR }}.${{ env.VTK_PATCH }} --depth 1
          mkdir -p vtk-build
        fi

    - name: Configure VTK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK configuration (cache hit)."
        else
          echo "Configuring VTK..."
          cmake -S vtk -B vtk-build -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=ON -DVTK_BUILD_TESTING=OFF
        fi

    - name: Build VTK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK build (cache hit)."
        else
          echo "Building VTK..."
          cmake --build vtk-build -- -j$(nproc)
        fi

    - name: Install VTK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping VTK install (cache hit)."
        else
          echo "Installing VTK..."
          cmake --install vtk-build
        fi

  update_itk:
    ########
    # BUILD AND CACHE ITK
    runs-on: ubuntu-22.04
    outputs:
      cache_key: ${{steps.itk_hash.outputs.cache_key}}
      git_hash: ${{steps.itk_hash.outputs.git_hash}}

    steps:
    - name: Get ITK Git Hash
      id: itk_hash
      run: |
        echo "Retrieving ITK commit hash..."
        HASH=$(git ls-remote --tags https://github.com/InsightSoftwareConsortium/ITK.git v${{ env.ITK_MAJOR }}.${{ env.ITK_MINOR }}.${{ env.ITK_PATCH }} | awk '{print $1}')
        if [ -z "$HASH" ]; then
          echo "Failed to retrieve ITK commit hash. Exiting."
          exit 1
        fi
        echo "ITK commit hash retrieved: $HASH"
        echo "cache_key=itk-${{ runner.os }}-${{ env.BUILD_TYPE }}-$HASH" >> "$GITHUB_OUTPUT"
        echo "git_hash=$HASH" >> "$GITHUB_OUTPUT"

    - name: Cache ITK Build
      id: cache-itk
      uses: actions/cache@v4
      with:
        path: |
          ITK
          itk-build
        key: ${{steps.itk_hash.outputs.cache_key}}

    - name: Check ITK Cache
      run: |
        if [ -d "itk-build" ]; then
          echo "ITK build found in cache. Skipping clone, configure, and build."
          echo "CACHE_HIT=true" >> $GITHUB_ENV
        else
          echo "ITK not found in cache. Proceeding with clone, configure, and build."
          echo "CACHE_HIT=false" >> $GITHUB_ENV
        fi

    - name: Install Dependencies
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping install dependencies (cache hit)."
        else
          echo "Installing system dependencies..."
          sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make
        fi

    - name: Clone ITK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK clone (cache hit)."
        else
          echo "Cloning ITK..."
          git clone https://github.com/InsightSoftwareConsortium/ITK.git --branch v${{ env.ITK_MAJOR }}.${{ env.ITK_MINOR }}.${{ env.ITK_PATCH }} --depth 1
          mkdir -p itk-build
        fi

    - name: Configure ITK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK configuration (cache hit)."
        else
          echo "Configuring ITK..."
          cmake -S ITK -B itk-build -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=ON -DITK_BUILD_TESTING=OFF
        fi

    - name: Build ITK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK build (cache hit)."
        else
          echo "Building ITK..."
          cmake --build itk-build -- -j$(nproc)
        fi

    - name: Install ITK
      run: |
        if [ "$CACHE_HIT" == "true" ]; then
          echo "Skipping ITK install (cache hit)."
        else
          echo "Installing ITK..."
          cmake --install itk-build
        fi
  
  build:
    needs: [update_vtk, update_itk]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        echo "Installing system dependencies..."
        sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Restore VTK Cache
      id: cache-vtk
      uses: actions/cache/restore@v4
      with:
        path: |
          vtk
          vtk-build
        key: ${{needs.update_vtk.outputs.cache_key}}

    - name: Restore ITK Cache
      id: cache-itk
      uses: actions/cache/restore@v4
      with:
        path: |
          ITK
          itk-build
        key: ${{needs.update_itk.outputs.cache_key}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVTK_DIR=${{github.workspace}}/vtk-build -DITK_DIR=${{github.workspace}}/itk-build -DIGSIO_SUPERBUILD=ON -DBUILDNAME="GH Action ${{ runner.os }} ${{ env.BUILD_TYPE }}"

    - name: Build and Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -D Experimental -DCTEST_SITE="GH Action ${{ runner.os }}"
