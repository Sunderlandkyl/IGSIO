# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:

    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    ### CACHE & BUILD VTK ###
    - name: Get VTK Git Hash
      id: vtk_hash
      run: echo "VTK_HASH=$(git ls-remote https://gitlab.kitware.com/vtk/vtk.git refs/heads/v9.3.0 | cut -f1)" >> $GITHUB_ENV

    - name: Cache VTK Build
      uses: actions/cache@v4
      with:
        path: vtk-build
        key: vtk-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ env.VTK_HASH }}
        restore-keys: |
          vtk-${{ runner.os }}-${{ env.BUILD_TYPE }}-

    - name: Clone VTK
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git clone https://gitlab.kitware.com/vtk/vtk.git --branch v9.3.0 --depth 1
        mkdir -p vtk-build

    - name: Configure VTK
      if: steps.cache.outputs.cache-hit != 'true'
      run: cmake -S vtk -B vtk-build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=ON -DVTK_BUILD_TESTING=OFF

    - name: Build VTK
      if: steps.cache.outputs.cache-hit != 'true'
      run: cmake --build vtk-build -- -j$(nproc)

    - name: Install VTK
      run: sudo cmake --install vtk-build

    ### CACHE & BUILD ITK ###
    - name: Get ITK Git Hash
      id: itk_hash
      run: echo "ITK_HASH=$(git ls-remote https://github.com/InsightSoftwareConsortium/ITK.git refs/heads/master | cut -f1)" >> $GITHUB_ENV

    - name: Cache ITK Build
      uses: actions/cache@v4
      with:
        path: itk-build
        key: itk-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ env.ITK_HASH }}
        restore-keys: |
          itk-${{ runner.os }}-${{ env.BUILD_TYPE }}-

    - name: Clone ITK
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/InsightSoftwareConsortium/ITK.git --branch master --depth 1
        mkdir -p itk-build

    - name: Configure ITK
      if: steps.cache.outputs.cache-hit != 'true'
      run: cmake -S ITK -B itk-build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=ON -DITK_BUILD_TESTING=OFF

    - name: Build ITK
      if: steps.cache.outputs.cache-hit != 'true'
      run: cmake --build itk-build -- -j$(nproc)

    - name: Install ITK
      run: sudo cmake --install itk-build
